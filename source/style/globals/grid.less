// -----------------------------------------------------------------------------
// Grid
// =============================================================================
// > The base grid is 5 squares wide (minus 1 square for small screens)
//
// Our `gl-BaselineGrid` is set to `4dp` with `line-height` of `24 / 16`. I don't
// think it's a great idea to stick to any vertical rhythm religiously, as screens
// don't react the same way as print. However, aim to use a standardised unit
// for gutters (columns, rows) and vertical blocks of content.
//
// 1. Set horizontal `margin`s or `margin-inline` to `16dp` (1rem) on outside
// 2. Set inner margins to `12dp` to fit the square grid where appropriate
//
// Bugs
// ----
// 1. Unfortunately you can't use css variables inside `@media` queries.

:root {
  // Square grid
  --grid-width-small: 740px;  // + 16dp margin = 772px
  --grid-width-medium: 928px; // + 16dp margin = 960px
  --grid-gap: var(--spacing-three-quarters);
}

// -----------------------------------------------------------------------------
// Global styles
// -----------------------------------------------------------------------------
// 1. Counters @ https://bit.ly/2tW2QvT and @ https://bit.ly/2KKKSpL

.gl-folio {
  border-bottom: var(--spacing-px) solid var(--color-ll);
  border-bottom: var(--spacing-px) solid var(--color-ll);
  color: var(--color-dd);
  font-family: var(--font-family-mono);
  font-size: var(--font-size-mm);
  padding: var(--spacing-three-quarters);

  p {
    margin: 0;
  }

  a {
    color: var(--color-dd);
    text-decoration: underline;

    &:visited {
      color: var(--color-dd);
    }
  }
}


nav {
  border-bottom: var(--spacing-px) solid var(--color-ll);
  overflow: scroll; // Mobile `li` overflows

  @media print {
    display: none;
  }

  @media screen and (min-width: 772px) {
    font-size: var(--font-size-p);
  }

  @media screen and (min-width: 960px) {
    // align-self: start;
    // justify-self: center;
    border-bottom: none;
    font-size: var(--font-size-p);
    padding: calc(var(--spacing-micro) * 4) 0 0;
  }

  a {
    text-decoration: none;
  }
}

nav ol {
  counter-reset: li;  // (1)
  display: flex;
  align-content: flex-start;
  flex-direction: column;
  flex-wrap: wrap;
  height: var(--spacing-increment);
  list-style: none;
  margin: 0;

  @media screen and (min-width: 1200px) {
    display: block;
    height: auto;
  }
}

nav ol li {
  margin: 0;
  padding-right: var(--spacing-one);

  &::before {
    color: var(--color-s);
    counter-increment: li;
    content: counters(li, ".", decimal-leading-zero); // (1)
    font-family: var(--font-family-mono);
    margin-right: var(--spacing-half);
  }

  @media screen and (min-width: 772px) {
    &::after {
      content: '·';
      padding-left: var(--spacing-one);
    }

    &:last-child::after {
      content: '';
    }
  }

  @media screen and (min-width: 960px) {
    padding: 0;

    &::after {
      content:none;
    }
  }
}

header {
  h1 {
    @media screen and (min-width: 800px) {
      font-size: var(--font-size-pppppp);
    }
  }
}

.gl-intro {
  h2 {
    display: inline;
    font-size: var(--font-size-pp);
    font-weight: 700;
    line-height: var(--line-height-one);
    margin: 0;
    padding-right: var(--spacing-half);

    @media screen and (min-width: 960px) {
      font-size: var(--font-size-ppp);
    }
  }

  p {
    display: inline;
    font-size: var(--font-size-pp);
    margin: 0;

    @media screen and (min-width: 960px) {
      font-size: var(--font-size-ppp);
    }
  }
}


// Footer ----------------------------------------------------------------------
// Should I be using `grid-footer` instead of `gl-footer`?

.gl-footer {
  @media screen {
    background: var(--color-p);
    border-top: var(--spacing-px) solid var(--color-ll);
  }

  a {
    color: var(--color-dddd);
    text-decoration: underline;

    &:hover,
    &:focus {
      color: var(--color-ppp);
    }
  }
}

.gl-f-social {
  @media screen {
    li {
      list-style: none;
      margin-left: 0;
    }
  }
}

.gl-f-tagline {
  background: var(--color-dddd);
  color: var(--color-lll);
  font-family: var(--font-family-mono);
  font-size: var(--font-size-mm);

  @media print {
    display: none;
  }

  @media screen and (min-width: 772px) {
    font-size: var(--font-size-m);
  }

  p {
    margin-bottom: var(--spacing-half);
  }

  a {
    color: var(--color-lll);
  }
}

.gl-f-social,
.gl-ft-content {
  padding: var(--spacing-one);

  @media screen and (min-width: 772px) {
    margin: 0 auto;
    padding: var(--spacing-one) 0;
    width: var(--grid-width-small);
  }
}


// -----------------------------------------------------------------------------
// Home page
// -----------------------------------------------------------------------------

#home .cta {
  padding: var(--spacing-one);
  border-top: var(--spacing-px) solid var(--color-ll);

  @media screen and (min-width: 772px) {
    margin: 0 auto;
    padding: var(--spacing-one) 0;
    width: var(--grid-width-small);
  }
}

#home .cta .gl-button {
  @media screen {
    color: var(--color-ddd);
    font-family: var(--font-family-mono);
    text-transform: uppercase;
    background: var(--color-lll);
    border: var(--spacing-micro) solid var(--color-ddd);

    &:hover,
    &:focus {
      color: var(--color-lll);
      background: var(--color-ddd);

      abbr {
        color: var(--color-s);
      }
    }
  }

  @media screen and (min-width: 772px) {
    display: inline-block;
    text-align: left;
  }

  abbr {
    text-decoration: none;
  }
}


// -----------------------------------------------------------------------------
// Buttons
// -----------------------------------------------------------------------------
// Works for `a` links and `button` elements. Regular links should show up in
// `@media print` as regular text.

.gl-button {
  @media screen {
    background-color: var(--color-pp);
    border-radius: var(--border-radius);
    color: var(--color-lll);
    display: inline-block;
    font-weight: bold;
    padding: var(--spacing-one) var(--spacing-two);
    text-align: center;
    text-decoration: none;
    transition: background-color 0.3s ease;

    &:hover {
      color: var(--color-lll);
      background: color-mix(in oklab, var(--color-ppp), black 30%); // (1)
    }
  }
}


// -----------------------------------------------------------------------------
// Grid styles
// -----------------------------------------------------------------------------
// > See the `⭐-CSS-GRID-LAYOUT` keynote for rough diagrams
//
// - It's not necessary to use `grid` for mobile, but we're doing it here.
//
// Vertical rythmn
// ---------------
// > Outer grid rows are currently automatically sized
//
// Unless your design is _very_ specific and rigid, you're going to have issues
// making the outer grid rows a square size. You've got different screen sizes
// to consider, and the outer grid is only 2 rows deep.
//
// Let the main content worry about sizing to the grid where it's appropriate,
// and use standard `--spacing` where it isn't. Everything should align to a
// .gl-BaselineGrid` and be divisible by 4. You can use the square (and other
// grids) as a baseline when sizing block-level elements vertically.
//
// Overlapping grids
// -----------------
// > Unless we change our "semantic" html structure, we'll have to overlap
// > `nav` and `main` to get the desired layout. I'm not sure if there's a
// > better way.
//
// 1. Nav may need to get wider (expand leftwards from `.gl-grid-square`
// 2. Nav may need it's own separate grid, overlapping the square one
// 3. Tracks can be named and use their automatic `-start` and `-end` lines
//
// Subgrids and named `grid-template-areas`
// -------------------------------------------
// > - Subgrids only inherit the grid lines/tracks of the parents!
// > - Child elements can only reference their IMMEDIATE parent's named areas.
// > - So named `grid-area`s are scoped locally to each grid container.
//
// You've also got to watch out how many elements you have within a `subgrid`.
// For example `.subgrid > .item4` would be FOUR rows. If you're trying to position
// to a parent grid's TWO rows it's going to be difficult (or impossible)
//
// I don't think it's currently possible to target `subgrid` children with
// named `grid-template-areas` (e.g: `.gl-body -> grid-area: body;`).
//
// Bugs to understand
// ------------------
// - #! When the `main` is subgrid but has no size only 2 rows are shown (not 3)
//     - This happens when there's an extra html element (row) that isn't accounted for in the CSS?

.gl-grid-square {
  display: grid;
  gap: var(--spacing-three-quarters);
  grid-template-columns: 1fr;
  grid-template-areas:
    "nav"
    "header"
    "main";
  margin: var(--spacing-one);

  @media screen and (min-width: 772px) {
      margin: 0 auto;
      width: var(--grid-width-small);
  }

  // #! (2)
  @media screen and (min-width: 960px) {
    grid-template-columns: repeat(5, 1fr);
    grid-template-areas:
      "header header header header header"
      "nav    col2   col3   col4   col5"
      "nav    col2   col3   col4   col5"; // #! (3) Overlap `nav`?
    width: var(--grid-width-medium);
  }
}

nav {
  grid-area: nav;
}

header {
  grid-area: header;
}

// main {
//   @media screen and (min-width: 960px) {
//     display: grid;
//     grid-column: nav-start / col5-end; // #! (3)
//     grid-row: nav-start / nav-end;   // #! (3)
//     grid-template-columns: subgrid;
//     grid-template-rows: subgrid;
//     grid-template-areas:
//       ". intro intro intro intro"
//       "body body body body body";
//   }
// }

// .gl-intro {
//   @media screen and (min-width: 960px) {
//     // grid-column: col2-start / col5-end;
//     // grid-row: nav-start / 2;
//     grid-area: intro;
//   }
// }

// .gl-body {
//   grid-area: body;
// }

// main {
//   grid-area: main;

//   @media screen and (min-width: 960px) {
//     display: grid;
//     grid-template-columns: subgrid;
//     grid-template-areas:
//       "none intro intro intro intro"
//       "body body body body body";
//   }
// }

// // Safari really doesn't like this code:
// // Is this legal with subgrid?!!
// .gl-intro {
//   grid-area: intro;
// }

// .gl-body {
//   grid-area: body;
// }
